---
import { getCollection, getEntry } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import AnimatedTitle from '../components/AnimatedTitle.astro';
import CanvasBackground from '../components/CanvasBackground.astro';
import DisplayCard from '../components/DisplayCard.astro';

const about = await getEntry('cards', 'about');
const work = await getCollection(
  'cards',
  ({ data }) => data.type === 'work'
).then((response) =>
  response.sort((a: any, b) => (a.data.sortOrder < b.data.sortOrder ? -1 : 1))
);

const play = await getCollection(
  'cards',
  ({ data }) => data.type === 'play'
).then((response) =>
  response.sort((a: any, b) => (a.data.sortOrder < b.data.sortOrder ? -1 : 1))
);

const themes = ['green', 'red', 'yellow'];
---

<Layout title="Alexander Mold's Portfolio">
  <header
    class="w-full relative flex items-center justify-center text-center h-dvh"
  >
    <CanvasBackground />
    <span
      class="click-me absolute top-10 left-10 -rotate-12 text-sm pointer-events-none"
    >
      (click me)
    </span>
    <div class="relative pointer-events-none">
      <AnimatedTitle text="Alexander Mold" />
      <p class="text-xl">Software Engineer</p>
    </div>
  </header>
  <main class="w-full max-w-2xl p-5 mx-auto" id="main">
    <div>
      <DisplayCard
        title={about.data.title}
        text={about.data.text}
        link={about.data.link}
        linkText={about.data.linkText}
        backgroundBoxColor="#fff586"
        theme="yellow"
      />
    </div>
    <div class="mb-20">
      <h3 class="site-title text-5xl font-bold">Work</h3>
      {
        work.map(({ data }: any, index) => {
          const direction = index % 2 === 0 ? 'left' : 'right';
          const theme = themes[index % themes.length];

          return (
            <DisplayCard
              title={data.title}
              text={data.text}
              link={data.link}
              linkText={data.linkText}
              image={data.image}
              imageType={data.imageType}
              direction={direction}
              theme={theme}
            />
          );
        })
      }
    </div>
    <div class="mb-20">
      <h3 class="site-title yellow text-5xl font-bold">Play</h3>
      {
        play.map(({ data }: any, index) => {
          const direction = index % 2 === 0 ? 'left' : 'right';
          const theme = themes[index % themes.length];

          return (
            <DisplayCard
              title={data.title}
              text={data.text}
              link={data.link}
              linkText={data.linkText}
              image={data.image}
              imageType={data.imageType}
              isExternal={data.isExternal}
              direction={direction}
              theme={theme}
            />
          );
        })
      }
    </div>
  </main>
</Layout>

<script>
  // Scroll down to main content on button click
  const handleScrollToMain = () => {
    const mainElement = document.getElementById('main');
    if (!mainElement) {
      return;
    }
    mainElement.scrollIntoView({
      behavior: 'smooth',
    });
  };

  const scrollDownButton = document.getElementById(
    'scroll-down'
  ) as HTMLElement;
  scrollDownButton.addEventListener('click', handleScrollToMain);

  // Add animation class when each display card is visible
  const cardElements = document.querySelectorAll('.display-card');
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('active');
      }
    });
  });

  cardElements.forEach((element) => observer.observe(element));
</script>

<style lang="scss">
  header {
    max-height: 600px;

    p {
      opacity: 0;
      margin-top: 1em;
      animation: RiseUp 450ms cubic-bezier(0.215, 0.61, 0.355, 1) forwards;
      animation-delay: 1000ms;
    }

    .click-me {
      opacity: 0;
      display: inline-block;
      animation: OpacityIn 200ms cubic-bezier(0.215, 0.61, 0.355, 1) forwards;
      animation-delay: 1500ms;
    }
  }

  @keyframes RiseUp {
    from {
      opacity: 0;
      transform: translateY(50px) skew(20deg);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes OpacityIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 0.5;
    }
  }

  .site-title {
    position: relative;
    display: inline-block;

    &::before {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 10px;
      background-color: #41e2ba;
      transform: rotate(2deg);
      z-index: -1;
      border-radius: 1em;
    }

    &.red {
      &::before {
        background-color: #e86a92;
      }
    }

    &.yellow {
      &::before {
        background-color: #fff586;
      }
    }
  }
</style>
